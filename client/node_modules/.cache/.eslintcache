[{"/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/index.js":"1","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/App.js":"2","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/pages/SavedBooks.js":"3","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/pages/SearchBooks.js":"4","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/components/Navbar.js":"5","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/components/SignupForm.js":"6","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/components/LoginForm.js":"7","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/utils/API.js":"8","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/utils/auth.js":"9","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/utils/localStorage.js":"10","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/utils/mutations.js":"11","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/utils/queries.js":"12"},{"size":266,"mtime":1678316475956,"results":"13","hashOfConfig":"14"},{"size":1517,"mtime":1678923312213,"results":"15","hashOfConfig":"14"},{"size":2617,"mtime":1678944200942,"results":"16","hashOfConfig":"14"},{"size":5456,"mtime":1678943161102,"results":"17","hashOfConfig":"14"},{"size":2524,"mtime":1678316475830,"results":"18","hashOfConfig":"14"},{"size":4092,"mtime":1678647167478,"results":"19","hashOfConfig":"14"},{"size":3518,"mtime":1678586862867,"results":"20","hashOfConfig":"14"},{"size":1419,"mtime":1678588223194,"results":"21","hashOfConfig":"14"},{"size":1234,"mtime":1678316476131,"results":"22","hashOfConfig":"14"},{"size":793,"mtime":1678316476172,"results":"23","hashOfConfig":"14"},{"size":942,"mtime":1678943778904,"results":"24","hashOfConfig":"14"},{"size":198,"mtime":1678921850105,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"uieue9",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"29"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/index.js",[],[],[],"/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/App.js",[],[],"/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/pages/SavedBooks.js",["66","67","68","69","70","71","72"],[],"/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/pages/SearchBooks.js",["73"],[],"/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/components/Navbar.js",[],[],"/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/components/SignupForm.js",["74","75","76"],[],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { Link } from 'react-router-dom';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\n// import { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // // set initial form state\n  // const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // // set state for form validation\n  const [validated] = useState(false);\n  // // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  // const handleInputChange = (event) => {\n  //   const { name, value } = event.target;\n  //   setUserFormData({ ...userFormData, [name]: value });\n  // };\n\n  // const handleFormSubmit = async (event) => {\n  //   event.preventDefault();\n\n  //   // check if form has everything (as per react-bootstrap docs)\n  //   const form = event.currentTarget;\n  //   if (form.checkValidity() === false) {\n  //     event.preventDefault();\n  //     event.stopPropagation();\n  //   }\n\n  //   try {\n  //     const response = await createUser(userFormData);\n\n  //     if (!response.ok) {\n  //       throw new Error('something went wrong!');\n  //     }\n\n  //     const { token, user } = await response.json();\n  //     console.log(user);\n  //     Auth.login(token);\n  //   } catch (err) {\n  //     console.error(err);\n  //     setShowAlert(true);\n  //   }\n\n  //   setUserFormData({\n  //     username: '',\n  //     email: '',\n  //     password: '',\n  //   });\n  // };\n\n\n  const [formState, setFormState] = useState({\n    username: '',\n    email: '',\n    password: '',\n  });\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n\n    try {\n      const { data } = await addUser({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleChange}\n            value={formState.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleChange}\n            value={formState.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleChange}\n            value={formState.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(formState.username && formState.email && formState.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\n\n\n\n\n\nexport default SignupForm;\n","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/components/LoginForm.js",["77","78","79"],[],"// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error, data }] = useMutation(LOGIN_USER);\n\n  // update state based on form input changes\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  // submit form\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    try {\n      const { data } = await login({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n\n    // clear form values\n    setFormState({\n      email: '',\n      password: '',\n    });\n  };\n\n  // const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n\n\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n\n\n\n\n  // const handleInputChange = (event) => {\n  //   const { name, value } = event.target;\n  //   setUserFormData({ ...userFormData, [name]: value });\n  // };\n\n  // const handleFormSubmit = async (event) => {\n  //   event.preventDefault();\n\n  //   // check if form has everything (as per react-bootstrap docs)\n  //   const form = event.currentTarget;\n  //   if (form.checkValidity() === false) {\n  //     event.preventDefault();\n  //     event.stopPropagation();\n  //   }\n\n  //   try {\n  //     const response = await loginUser(userFormData);\n\n  //     if (!response.ok) {\n  //       throw new Error('something went wrong!');\n  //     }\n\n  //     const { token, user } = await response.json();\n  //     console.log(user);\n  //     Auth.login(token);\n  //   } catch (err) {\n  //     console.error(err);\n  //     setShowAlert(true);\n  //   }\n\n  //   setUserFormData({\n  //     username: '',\n  //     email: '',\n  //     password: '',\n  //   });\n  // };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleChange}\n            value={formState.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleChange}\n            value={formState.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(formState.email && formState.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/utils/API.js",[],[],"/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/utils/auth.js",["80"],[],"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/utils/localStorage.js",[],[],"/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/utils/mutations.js",[],[],"/Users/clairebain/bootcamp/challenges/book-search-engine/client/src/utils/queries.js",[],[],{"ruleId":"81","severity":1,"message":"82","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":25},{"ruleId":"81","severity":1,"message":"85","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"86","line":8,"column":24,"nodeType":"83","messageId":"84","endLine":8,"endColumn":39},{"ruleId":"81","severity":1,"message":"87","line":9,"column":10,"nodeType":"83","messageId":"84","endLine":9,"endColumn":24},{"ruleId":"81","severity":1,"message":"88","line":15,"column":9,"nodeType":"83","messageId":"84","endLine":15,"endColumn":14},{"ruleId":"81","severity":1,"message":"89","line":23,"column":20,"nodeType":"83","messageId":"84","endLine":23,"endColumn":25},{"ruleId":"81","severity":1,"message":"90","line":42,"column":12,"nodeType":"83","messageId":"84","endLine":42,"endColumn":16},{"ruleId":"81","severity":1,"message":"90","line":82,"column":15,"nodeType":"83","messageId":"84","endLine":82,"endColumn":19},{"ruleId":"81","severity":1,"message":"91","line":4,"column":10,"nodeType":"83","messageId":"84","endLine":4,"endColumn":14},{"ruleId":"81","severity":1,"message":"89","line":63,"column":21,"nodeType":"83","messageId":"84","endLine":63,"endColumn":26},{"ruleId":"81","severity":1,"message":"90","line":63,"column":28,"nodeType":"83","messageId":"84","endLine":63,"endColumn":32},{"ruleId":"81","severity":1,"message":"91","line":4,"column":10,"nodeType":"83","messageId":"84","endLine":4,"endColumn":14},{"ruleId":"81","severity":1,"message":"89","line":13,"column":19,"nodeType":"83","messageId":"84","endLine":13,"endColumn":24},{"ruleId":"81","severity":1,"message":"90","line":13,"column":26,"nodeType":"83","messageId":"84","endLine":13,"endColumn":30},{"ruleId":"92","severity":1,"message":"93","line":49,"column":1,"nodeType":"94","endLine":49,"endColumn":34},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'getSavedBookIds' is defined but never used.","'useRevalidator' is defined but never used.","'token' is assigned a value but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'Link' is defined but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration"]